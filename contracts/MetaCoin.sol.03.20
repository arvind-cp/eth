pragma solidity ^0.4.4;

import "./ConvertLib.sol";

// This is just a simple example of a coin-like contract.
// It is not standards compatible and cannot be expected to talk to other
// coin/token contracts. If you want to create a standards-compliant
// token, see: https://github.com/ConsenSys/Tokens. Cheers!

contract MetaCoin {
	mapping (address => uint) balances;
	mapping (address => uint) ethBalances;
       
	event Transfer(address indexed _from, address indexed _to, uint256 _value);
        event SendEther(address addr,uint val);
	function MetaCoin() {
		balances[tx.origin] = 10000;
	}


	function getCoinBal(address addr) returns(uint) {
		return balances[addr];
	}
	
	function getEthBal(address sndr) returns(uint) {
                return ethBalances[sndr];
        }

	function sendCoin(address receiver, uint amount) returns(bool sufficient) {
                if (balances[msg.sender] < amount) return false;
                balances[msg.sender] -= amount;
                balances[receiver] += amount;
                Transfer(msg.sender, receiver, amount);
                return true;
        }



 	function sendEth() payable public returns(uint) {
		ethBalances[msg.sender]=msg.value;
		SendEther(msg.sender,msg.value);
		return msg.value;
                }

	function recvEth() returns(bool) 
	{
	      	
              if(!msg.sender.send(1000))
		{
		throw;
		return false;
		}
		return true;
        }
}
